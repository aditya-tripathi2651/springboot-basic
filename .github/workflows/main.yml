name: Build and Deploy Spring Boot App

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build with Maven
        run: mvn clean package

      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: springboot-jar
          path: target/*.jar

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: springboot-jar

      - name: Rename JAR (if needed)
        run: |
          JAR_PATH=$(find . -name "*.jar" | head -n 1)
          echo "Detected JAR: $JAR_PATH"
          [ "$(basename "$JAR_PATH")" != "demo-1.0.0.jar" ] && mv "$JAR_PATH" demo-1.0.0.jar

      - name: Validate Secrets
        run: |
          echo "EC2_SSH_KEY Length: ${#EC2_SSH_KEY}"
          echo "EC2_HOST: $EC2_HOST"
          echo "EC2_USERNAME: $EC2_USERNAME"
        env:
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USERNAME: ${{ secrets.EC2_USERNAME }}

      - name: Create PEM Key
        run: |
          echo "$EC2_SSH_KEY" > key.pem
          chmod 600 key.pem
        env:
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}

      - name: Deploy JAR to EC2 via SCP
        run: |
          scp -i key.pem -o StrictHostKeyChecking=no demo-1.0.0.jar $EC2_USERNAME@$EC2_HOST:~/demo-1.0.0.jar
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USERNAME: ${{ secrets.EC2_USERNAME }}

      - name: Restart App on EC2
        run: |
          ssh -i key.pem -o StrictHostKeyChecking=no $EC2_USERNAME@$EC2_HOST << EOF
            pkill -f demo-1.0.0.jar || true
            nohup java -jar demo-1.0.0.jar > spring.log 2>&1 &
          EOF
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USERNAME: ${{ secrets.EC2_USERNAME }}

